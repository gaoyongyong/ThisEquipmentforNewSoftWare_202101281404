//
//  File generated by HDevelop for HALCON/DOTNET (C#) Version 12.0
//
//  This file is intended to be used with the HDevelopTemplate or
//  HDevelopTemplateWPF projects located under %HALCONEXAMPLES%\c#

using System;
using System.Windows.Forms;
using HalconDotNet;
namespace VISION_CVX
{
    public partial class HDevelopExport
    {
        public HTuple hv_ExpDefaultWinHandle;
        // Stack for temporary objects 
        HObject[] OTemp = new HObject[20];
        //double Width = 1920, Height = 1200;
        HTuple Width = null, Height = null;
        HTuple Width1 = null, Height1 = null;

        // Local iconic variables 
        HObject ho_Image1, ho_Rectangle2;
        HObject ho_ModelContours2, ho_Rectangle1, ho_Regions1, ho_Cross1;
        HObject ho_Line, ho_Regions2, ho_Cross2, ho_Line1, ho_Cross1a;

        HObject ho_Image, ho_Rectangle, ho_ImageReduced;
        HObject ho_SymbolXLDs, ho_EmptyObject, ho_SymbolXLDs1 = null;
        HObject ho_ObjectSelected = null, ho_Cross5;
    
        // Local control variables 
        HTuple hv_UniteX = new HTuple(), hv_UniteY = new HTuple(), Unite = new HTuple();
        HTuple hv_UniteX1 = new HTuple(), hv_UniteY1 = new HTuple();
        HTuple hv_Width = null, hv_Height = null, hv_DataCodeHandle = null;
        HTuple hv_Row1 = null, hv_Column1 = null, hv_Row2 = null;
        HTuple hv_Column2 = null, hv_Path = null, hv_FileExists = null;
        HTuple hv_ResultHandles = null, hv_DecodedDataStrings = null;
        HTuple hv_Area = null, hv_Row = null, hv_Column = null;
        HTuple hv_PointOrder = null, hv_X = null, hv_Y = null, hv_X1 = null, hv_Y1 = null;
        HTuple hv_rowword = null, hv_colword = null, hv_Angword = null;
        HTuple hv_ImageFiles = null, hv_Index = null, hv_ResultHandles1 = new HTuple();
        HTuple hv_DecodedDataStrings1 = new HTuple(), hv_i = new HTuple();
        HTuple hv_Number = new HTuple(), hv_Area1 = null, hv_Row3 = null;
        HTuple hv_Column3 = null, hv_PointOrder1 = null, hv_HomMat2D = null;
        HTuple hv_Sx = new HTuple(), hv_Sy = new HTuple(), hv_Phi = new HTuple();
        HTuple hv_Theta = new HTuple(), hv_Tx = new HTuple(), hv_Ty = new HTuple();
        HTuple hv_Ratio = new HTuple(),hv_Width1 = null, hv_Height1 = null;
        HTuple hv_Row1C = null, hv_Column1C = null, hv_Row2C = null;
        HTuple hv_Column2C = null, hv_ModelID2 = null, hv_Row4 = null;
        HTuple hv_Column4 = null, hv_Angle4 = null, hv_Score3 = null;
        HTuple hv_Row11 = null, hv_Column11 = null, hv_Row21 = null;
        HTuple hv_Column21 = null, hv_ResultRow = null, hv_ResultColumn = null;
        HTuple hv_Row1a = null, hv_Col1a = null, hv_Row2a = null;
        HTuple hv_Col2a = null, hv_Row12 = null, hv_Column12 = null;
        HTuple hv_Row22 = null, hv_Column22 = null, hv_ResultRow1 = null;
        HTuple hv_ResultColumn1 = null, hv_Row1b = null, hv_Col1b = null;
        HTuple hv_Row2b = null, hv_Col2b = null, hv_Row1r = null;
        HTuple hv_Col1r = null, hv_IsParallel = null, hv_Row8 = null;
        HTuple hv_Column8 = null, hv_Angle8 = null, hv_Score1 = null;
        HTuple hv_HomMat2D5 = new HTuple(), hv_tRow11 = new HTuple();
        HTuple hv_tColumn11 = new HTuple(), hv_tRow21 = new HTuple();
        HTuple hv_tColumn21 = new HTuple(), hv_tRow12 = new HTuple();
        HTuple hv_tColumn12 = new HTuple(), hv_tRow22 = new HTuple();
        HTuple hv_tColumn22 = new HTuple(), hv_Angle = new HTuple();
        HTuple hv_Deg = new HTuple();


        #region 导出固定部分
        public void HDevelopStop()
        {
            MessageBox.Show("Press button to continue", "Program stop");
        }

        // Procedures 
        // External procedures 
        public void draw_rake(out HObject ho_Regions, HTuple hv_WindowHandle, HTuple hv_Elements,
            HTuple hv_DetectHeight, HTuple hv_DetectWidth, out HTuple hv_Row1, out HTuple hv_Column1,
            out HTuple hv_Row2, out HTuple hv_Column2)
        {

            // Stack for temporary objects 
            HObject[] OTemp = new HObject[20];

            // Local iconic variables 

            HObject ho_RegionLines, ho_Rectangle = null;
            HObject ho_Arrow1 = null;

            // Local control variables 

            HTuple hv_ATan = null, hv_Deg1 = null, hv_Deg = null;
            HTuple hv_i = null, hv_RowC = new HTuple(), hv_ColC = new HTuple();
            HTuple hv_Distance = new HTuple(), hv_RowL2 = new HTuple();
            HTuple hv_RowL1 = new HTuple(), hv_ColL2 = new HTuple();
            HTuple hv_ColL1 = new HTuple();
            // Initialize local and output iconic variables 
            HOperatorSet.GenEmptyObj(out ho_Regions);
            HOperatorSet.GenEmptyObj(out ho_RegionLines);
            HOperatorSet.GenEmptyObj(out ho_Rectangle);
            HOperatorSet.GenEmptyObj(out ho_Arrow1);
            try
            {
                disp_message(hv_ExpDefaultWinHandle, "点击鼠标左键画一条直线,点击右键确认",
                    "window", 12, 12, "red", "false");
                ho_Regions.Dispose();
                HOperatorSet.GenEmptyObj(out ho_Regions);
                HOperatorSet.DrawLine(hv_ExpDefaultWinHandle, out hv_Row1, out hv_Column1,
                    out hv_Row2, out hv_Column2);
                //disp_line (WindowHandle, Row1, Column1, Row2, Column2)
                ho_RegionLines.Dispose();
                HOperatorSet.GenRegionLine(out ho_RegionLines, hv_Row1, hv_Column1, hv_Row2,
                    hv_Column2);
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.ConcatObj(ho_Regions, ho_RegionLines, out ExpTmpOutVar_0);
                    ho_Regions.Dispose();
                    ho_Regions = ExpTmpOutVar_0;
                }
                HOperatorSet.TupleAtan2((-hv_Row2) + hv_Row1, hv_Column2 - hv_Column1, out hv_ATan);
                HOperatorSet.TupleDeg(hv_ATan, out hv_Deg1);

                hv_ATan = hv_ATan + ((new HTuple(90)).TupleRad());

                HOperatorSet.TupleDeg(hv_ATan, out hv_Deg);


                HTuple end_val14 = hv_Elements;
                HTuple step_val14 = 1;
                for (hv_i = 1; hv_i.Continue(end_val14, step_val14); hv_i = hv_i.TupleAdd(step_val14))
                {
                    hv_RowC = hv_Row1 + (((hv_Row2 - hv_Row1) * hv_i) / (hv_Elements + 1));
                    hv_ColC = hv_Column1 + (((hv_Column2 - hv_Column1) * hv_i) / (hv_Elements + 1));

                    if ((int)(new HTuple(hv_Elements.TupleEqual(1))) != 0)
                    {
                        HOperatorSet.DistancePp(hv_Row1, hv_Column1, hv_Row2, hv_Column2, out hv_Distance);
                        ho_Rectangle.Dispose();
                        HOperatorSet.GenRectangle2ContourXld(out ho_Rectangle, hv_RowC, hv_ColC,
                            hv_Deg.TupleRad(), hv_DetectHeight / 2, hv_Distance / 2);
                    }
                    else
                    {
                        ho_Rectangle.Dispose();
                        HOperatorSet.GenRectangle2ContourXld(out ho_Rectangle, hv_RowC, hv_ColC,
                            hv_Deg.TupleRad(), hv_DetectHeight / 2, hv_DetectWidth / 2);
                    }

                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.ConcatObj(ho_Regions, ho_Rectangle, out ExpTmpOutVar_0);
                        ho_Regions.Dispose();
                        ho_Regions = ExpTmpOutVar_0;
                    }
                    if ((int)(new HTuple(hv_i.TupleEqual(1))) != 0)
                    {
                        hv_RowL2 = hv_RowC + ((hv_DetectHeight / 2) * (((-hv_ATan)).TupleSin()));
                        hv_RowL1 = hv_RowC - ((hv_DetectHeight / 2) * (((-hv_ATan)).TupleSin()));
                        hv_ColL2 = hv_ColC + ((hv_DetectHeight / 2) * (((-hv_ATan)).TupleCos()));
                        hv_ColL1 = hv_ColC - ((hv_DetectHeight / 2) * (((-hv_ATan)).TupleCos()));
                        ho_Arrow1.Dispose();
                        gen_arrow_contour_xld(out ho_Arrow1, hv_RowL1, hv_ColL1, hv_RowL2, hv_ColL2,
                            25, 25);
                        {
                            HObject ExpTmpOutVar_0;
                            HOperatorSet.ConcatObj(ho_Regions, ho_Arrow1, out ExpTmpOutVar_0);
                            ho_Regions.Dispose();
                            ho_Regions = ExpTmpOutVar_0;
                        }
                    }
                }

                ho_RegionLines.Dispose();
                ho_Rectangle.Dispose();
                ho_Arrow1.Dispose();

                return;
            }
            catch (HalconException HDevExpDefaultException)
            {
                ho_RegionLines.Dispose();
                ho_Rectangle.Dispose();
                ho_Arrow1.Dispose();

                throw HDevExpDefaultException;
            }
        }

        public void pts_to_best_line(out HObject ho_Line, HTuple hv_Rows, HTuple hv_Cols,
            HTuple hv_ActiveNum, out HTuple hv_Row1, out HTuple hv_Col1, out HTuple hv_Row2,
            out HTuple hv_Col2)
        {
            // Local iconic variables 

            HObject ho_Contour = null;

            // Local control variables 

            HTuple hv_Length = null, hv_Nr = new HTuple();
            HTuple hv_Nc = new HTuple(), hv_Dist = new HTuple(), hv_Length1 = new HTuple();
            // Initialize local and output iconic variables 
            HOperatorSet.GenEmptyObj(out ho_Line);
            HOperatorSet.GenEmptyObj(out ho_Contour);
            try
            {
                hv_Row1 = 0;
                hv_Col1 = 0;
                hv_Row2 = 0;
                hv_Col2 = 0;
                ho_Line.Dispose();
                HOperatorSet.GenEmptyObj(out ho_Line);
                HOperatorSet.TupleLength(hv_Cols, out hv_Length);

                if ((int)((new HTuple(hv_Length.TupleGreaterEqual(hv_ActiveNum))).TupleAnd(
                    new HTuple(hv_ActiveNum.TupleGreater(1)))) != 0)
                {

                    ho_Contour.Dispose();
                    HOperatorSet.GenContourPolygonXld(out ho_Contour, hv_Rows, hv_Cols);
                    HOperatorSet.FitLineContourXld(ho_Contour, "tukey", hv_ActiveNum, 0, 5, 2,
                        out hv_Row1, out hv_Col1, out hv_Row2, out hv_Col2, out hv_Nr, out hv_Nc,
                        out hv_Dist);
                    HOperatorSet.TupleLength(hv_Dist, out hv_Length1);
                    if ((int)(new HTuple(hv_Length1.TupleLess(1))) != 0)
                    {
                        ho_Contour.Dispose();

                        return;
                    }
                    ho_Line.Dispose();
                    HOperatorSet.GenContourPolygonXld(out ho_Line, hv_Row1.TupleConcat(hv_Row2),
                        hv_Col1.TupleConcat(hv_Col2));

                }

                ho_Contour.Dispose();

                return;
            }
            catch (HalconException HDevExpDefaultException)
            {
                ho_Contour.Dispose();

                throw HDevExpDefaultException;
            }
        }

        public void rake(HObject ho_Image, out HObject ho_Regions, HTuple hv_Elements,
            HTuple hv_DetectHeight, HTuple hv_DetectWidth, HTuple hv_Sigma, HTuple hv_Threshold,
            HTuple hv_Transition, HTuple hv_Select, HTuple hv_Row1, HTuple hv_Column1, HTuple hv_Row2,
            HTuple hv_Column2, out HTuple hv_ResultRow, out HTuple hv_ResultColumn)
        {
            // Stack for temporary objects 
            HObject[] OTemp = new HObject[20];

            // Local iconic variables 

            HObject ho_Rectangle = null, ho_Arrow1 = null;

            // Local control variables 

            HTuple hv_Width = null, hv_Height = null, hv_ATan = null;
            HTuple hv_Deg1 = null, hv_Deg = null, hv_i = null, hv_RowC = new HTuple();
            HTuple hv_ColC = new HTuple(), hv_Distance = new HTuple();
            HTuple hv_RowL2 = new HTuple(), hv_RowL1 = new HTuple();
            HTuple hv_ColL2 = new HTuple(), hv_ColL1 = new HTuple();
            HTuple hv_MsrHandle_Measure = new HTuple(), hv_RowEdge = new HTuple();
            HTuple hv_ColEdge = new HTuple(), hv_Amplitude = new HTuple();
            HTuple hv_tRow = new HTuple(), hv_tCol = new HTuple();
            HTuple hv_t = new HTuple(), hv_Number = new HTuple(), hv_j = new HTuple();
            HTuple hv_Select_COPY_INP_TMP = hv_Select.Clone();
            HTuple hv_Transition_COPY_INP_TMP = hv_Transition.Clone();

            // Initialize local and output iconic variables 
            HOperatorSet.GenEmptyObj(out ho_Regions);
            HOperatorSet.GenEmptyObj(out ho_Rectangle);
            HOperatorSet.GenEmptyObj(out ho_Arrow1);
            try
            {
                HOperatorSet.GetImageSize(ho_Image, out hv_Width, out hv_Height);

                ho_Regions.Dispose();
                HOperatorSet.GenEmptyObj(out ho_Regions);
                hv_ResultRow = new HTuple();
                hv_ResultColumn = new HTuple();
                HOperatorSet.TupleAtan2((-hv_Row2) + hv_Row1, hv_Column2 - hv_Column1, out hv_ATan);
                HOperatorSet.TupleDeg(hv_ATan, out hv_Deg1);

                hv_ATan = hv_ATan + ((new HTuple(90)).TupleRad());

                HOperatorSet.TupleDeg(hv_ATan, out hv_Deg);


                HTuple end_val13 = hv_Elements;
                HTuple step_val13 = 1;
                for (hv_i = 1; hv_i.Continue(end_val13, step_val13); hv_i = hv_i.TupleAdd(step_val13))
                {
                    hv_RowC = hv_Row1 + (((hv_Row2 - hv_Row1) * hv_i) / (hv_Elements + 1));
                    hv_ColC = hv_Column1 + (((hv_Column2 - hv_Column1) * hv_i) / (hv_Elements + 1));
                    if ((int)((new HTuple((new HTuple((new HTuple(hv_RowC.TupleGreater(hv_Height - 1))).TupleOr(
                        new HTuple(hv_RowC.TupleLess(0))))).TupleOr(new HTuple(hv_ColC.TupleGreater(
                        hv_Width - 1))))).TupleOr(new HTuple(hv_ColC.TupleLess(0)))) != 0)
                    {
                        continue;
                    }
                    if ((int)(new HTuple(hv_Elements.TupleEqual(1))) != 0)
                    {
                        HOperatorSet.DistancePp(hv_Row1, hv_Column1, hv_Row2, hv_Column2, out hv_Distance);
                        ho_Rectangle.Dispose();
                        HOperatorSet.GenRectangle2ContourXld(out ho_Rectangle, hv_RowC, hv_ColC,
                            hv_Deg.TupleRad(), hv_DetectHeight / 2, hv_Distance / 2);
                    }
                    else
                    {
                        ho_Rectangle.Dispose();
                        HOperatorSet.GenRectangle2ContourXld(out ho_Rectangle, hv_RowC, hv_ColC,
                            hv_Deg.TupleRad(), hv_DetectHeight / 2, hv_DetectWidth / 2);
                    }

                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.ConcatObj(ho_Regions, ho_Rectangle, out ExpTmpOutVar_0);
                        ho_Regions.Dispose();
                        ho_Regions = ExpTmpOutVar_0;
                    }
                    if ((int)(new HTuple(hv_i.TupleEqual(1))) != 0)
                    {
                        hv_RowL2 = hv_RowC + ((hv_DetectHeight / 2) * (((-hv_ATan)).TupleSin()));
                        hv_RowL1 = hv_RowC - ((hv_DetectHeight / 2) * (((-hv_ATan)).TupleSin()));
                        hv_ColL2 = hv_ColC + ((hv_DetectHeight / 2) * (((-hv_ATan)).TupleCos()));
                        hv_ColL1 = hv_ColC - ((hv_DetectHeight / 2) * (((-hv_ATan)).TupleCos()));
                        ho_Arrow1.Dispose();
                        gen_arrow_contour_xld(out ho_Arrow1, hv_RowL1, hv_ColL1, hv_RowL2, hv_ColL2,
                            25, 25);
                        {
                            HObject ExpTmpOutVar_0;
                            HOperatorSet.ConcatObj(ho_Regions, ho_Arrow1, out ExpTmpOutVar_0);
                            ho_Regions.Dispose();
                            ho_Regions = ExpTmpOutVar_0;
                        }
                    }
                    HOperatorSet.GenMeasureRectangle2(hv_RowC, hv_ColC, hv_Deg.TupleRad(), hv_DetectHeight / 2,
                        hv_DetectWidth / 2, hv_Width, hv_Height, "nearest_neighbor", out hv_MsrHandle_Measure);


                    if ((int)(new HTuple(hv_Transition_COPY_INP_TMP.TupleEqual("negative"))) != 0)
                    {
                        hv_Transition_COPY_INP_TMP = "negative";
                    }
                    else
                    {
                        if ((int)(new HTuple(hv_Transition_COPY_INP_TMP.TupleEqual("positive"))) != 0)
                        {

                            hv_Transition_COPY_INP_TMP = "positive";
                        }
                        else
                        {
                            hv_Transition_COPY_INP_TMP = "all";
                        }
                    }

                    if ((int)(new HTuple(hv_Select_COPY_INP_TMP.TupleEqual("first"))) != 0)
                    {
                        hv_Select_COPY_INP_TMP = "first";
                    }
                    else
                    {
                        if ((int)(new HTuple(hv_Select_COPY_INP_TMP.TupleEqual("last"))) != 0)
                        {

                            hv_Select_COPY_INP_TMP = "last";
                        }
                        else
                        {
                            hv_Select_COPY_INP_TMP = "all";
                        }
                    }

                    HOperatorSet.MeasurePos(ho_Image, hv_MsrHandle_Measure, hv_Sigma, hv_Threshold,
                        hv_Transition_COPY_INP_TMP, hv_Select_COPY_INP_TMP, out hv_RowEdge, out hv_ColEdge,
                        out hv_Amplitude, out hv_Distance);
                    HOperatorSet.CloseMeasure(hv_MsrHandle_Measure);
                    hv_tRow = 0;
                    hv_tCol = 0;
                    hv_t = 0;
                    HOperatorSet.TupleLength(hv_RowEdge, out hv_Number);
                    if ((int)(new HTuple(hv_Number.TupleLess(1))) != 0)
                    {
                        continue;
                    }
                    HTuple end_val69 = hv_Number - 1;
                    HTuple step_val69 = 1;
                    for (hv_j = 0; hv_j.Continue(end_val69, step_val69); hv_j = hv_j.TupleAdd(step_val69))
                    {
                        if ((int)(new HTuple(((((hv_Amplitude.TupleSelect(hv_j))).TupleAbs())).TupleGreater(
                            hv_t))) != 0)
                        {

                            hv_tRow = hv_RowEdge.TupleSelect(hv_j);
                            hv_tCol = hv_ColEdge.TupleSelect(hv_j);
                            hv_t = ((hv_Amplitude.TupleSelect(hv_j))).TupleAbs();
                        }
                    }
                    if ((int)(new HTuple(hv_t.TupleGreater(0))) != 0)
                    {

                        hv_ResultRow = hv_ResultRow.TupleConcat(hv_tRow);
                        hv_ResultColumn = hv_ResultColumn.TupleConcat(hv_tCol);
                    }
                }
                HOperatorSet.TupleLength(hv_ResultRow, out hv_Number);


                ho_Rectangle.Dispose();
                ho_Arrow1.Dispose();

                return;
            }
            catch (HalconException HDevExpDefaultException)
            {
                ho_Rectangle.Dispose();
                ho_Arrow1.Dispose();

                throw HDevExpDefaultException;
            }
        }
        // Procedures 
        // Chapter: Graphics / Text
        // Short Description: This procedure writes a text message. 
        public void disp_message(HTuple hv_WindowHandle, HTuple hv_String, HTuple hv_CoordSystem,
            HTuple hv_Row, HTuple hv_Column, HTuple hv_Color, HTuple hv_Box)
        {
            // Local iconic variables 
            // Local control variables 

            HTuple hv_Red = null, hv_Green = null, hv_Blue = null;
            HTuple hv_Row1Part = null, hv_Column1Part = null, hv_Row2Part = null;
            HTuple hv_Column2Part = null, hv_RowWin = null, hv_ColumnWin = null;
            HTuple hv_WidthWin = new HTuple(), hv_HeightWin = null;
            HTuple hv_MaxAscent = null, hv_MaxDescent = null, hv_MaxWidth = null;
            HTuple hv_MaxHeight = null, hv_R1 = new HTuple(), hv_C1 = new HTuple();
            HTuple hv_FactorRow = new HTuple(), hv_FactorColumn = new HTuple();
            HTuple hv_UseShadow = null, hv_ShadowColor = null, hv_Exception = new HTuple();
            HTuple hv_Width = new HTuple(), hv_Index = new HTuple();
            HTuple hv_Ascent = new HTuple(), hv_Descent = new HTuple();
            HTuple hv_W = new HTuple(), hv_H = new HTuple(), hv_FrameHeight = new HTuple();
            HTuple hv_FrameWidth = new HTuple(), hv_R2 = new HTuple();
            HTuple hv_C2 = new HTuple(), hv_DrawMode = new HTuple();
            HTuple hv_CurrentColor = new HTuple();
            HTuple hv_Box_COPY_INP_TMP = hv_Box.Clone();
            HTuple hv_Color_COPY_INP_TMP = hv_Color.Clone();
            HTuple hv_Column_COPY_INP_TMP = hv_Column.Clone();
            HTuple hv_Row_COPY_INP_TMP = hv_Row.Clone();
            HTuple hv_String_COPY_INP_TMP = hv_String.Clone();
            //Prepare window
            HOperatorSet.GetRgb(hv_ExpDefaultWinHandle, out hv_Red, out hv_Green, out hv_Blue);
            HOperatorSet.GetPart(hv_ExpDefaultWinHandle, out hv_Row1Part, out hv_Column1Part,
                out hv_Row2Part, out hv_Column2Part);
            HOperatorSet.GetWindowExtents(hv_ExpDefaultWinHandle, out hv_RowWin, out hv_ColumnWin,
                out hv_WidthWin, out hv_HeightWin);
            HOperatorSet.SetPart(hv_ExpDefaultWinHandle, 0, 0, hv_HeightWin - 1, hv_WidthWin - 1);
            //
            //default settings
            if ((int)(new HTuple(hv_Row_COPY_INP_TMP.TupleEqual(-1))) != 0)
            {
                hv_Row_COPY_INP_TMP = 12;
            }
            if ((int)(new HTuple(hv_Column_COPY_INP_TMP.TupleEqual(-1))) != 0)
            {
                hv_Column_COPY_INP_TMP = 12;
            }
            if ((int)(new HTuple(hv_Color_COPY_INP_TMP.TupleEqual(new HTuple()))) != 0)
            {
                hv_Color_COPY_INP_TMP = "";
            }
            //
            hv_String_COPY_INP_TMP = ((("" + hv_String_COPY_INP_TMP) + "")).TupleSplit("\n");
            //
            //Estimate extentions of text depending on font size.
            HOperatorSet.GetFontExtents(hv_ExpDefaultWinHandle, out hv_MaxAscent, out hv_MaxDescent,
                out hv_MaxWidth, out hv_MaxHeight);
            if ((int)(new HTuple(hv_CoordSystem.TupleEqual("window"))) != 0)
            {
                hv_R1 = hv_Row_COPY_INP_TMP.Clone();
                hv_C1 = hv_Column_COPY_INP_TMP.Clone();
            }
            else
            {
                //Transform image to window coordinates
                hv_FactorRow = (1.0 * hv_HeightWin) / ((hv_Row2Part - hv_Row1Part) + 1);
                hv_FactorColumn = (1.0 * hv_WidthWin) / ((hv_Column2Part - hv_Column1Part) + 1);
                hv_R1 = ((hv_Row_COPY_INP_TMP - hv_Row1Part) + 0.5) * hv_FactorRow;
                hv_C1 = ((hv_Column_COPY_INP_TMP - hv_Column1Part) + 0.5) * hv_FactorColumn;
            }
            //
            //Display text box depending on text size
            hv_UseShadow = 1;
            hv_ShadowColor = "gray";
            if ((int)(new HTuple(((hv_Box_COPY_INP_TMP.TupleSelect(0))).TupleEqual("true"))) != 0)
            {
                if (hv_Box_COPY_INP_TMP == null)
                    hv_Box_COPY_INP_TMP = new HTuple();
                hv_Box_COPY_INP_TMP[0] = "#fce9d4";
                hv_ShadowColor = "#f28d26";
            }
            if ((int)(new HTuple((new HTuple(hv_Box_COPY_INP_TMP.TupleLength())).TupleGreater(
                1))) != 0)
            {
                if ((int)(new HTuple(((hv_Box_COPY_INP_TMP.TupleSelect(1))).TupleEqual("true"))) != 0)
                {
                    //Use default ShadowColor set above
                }
                else if ((int)(new HTuple(((hv_Box_COPY_INP_TMP.TupleSelect(1))).TupleEqual(
                    "false"))) != 0)
                {
                    hv_UseShadow = 0;
                }
                else
                {
                    hv_ShadowColor = hv_Box_COPY_INP_TMP[1];
                    //Valid color?
                    try
                    {
                        HOperatorSet.SetColor(hv_ExpDefaultWinHandle, hv_Box_COPY_INP_TMP.TupleSelect(
                            1));
                    }
                    // catch (Exception) 
                    catch (HalconException HDevExpDefaultException1)
                    {
                        HDevExpDefaultException1.ToHTuple(out hv_Exception);
                        hv_Exception = "Wrong value of control parameter Box[1] (must be a 'true', 'false', or a valid color string)";
                        throw new HalconException(hv_Exception);
                    }
                }
            }
            if ((int)(new HTuple(((hv_Box_COPY_INP_TMP.TupleSelect(0))).TupleNotEqual("false"))) != 0)
            {
                //Valid color?
                try
                {
                    HOperatorSet.SetColor(hv_ExpDefaultWinHandle, hv_Box_COPY_INP_TMP.TupleSelect(
                        0));
                }
                // catch (Exception) 
                catch (HalconException HDevExpDefaultException1)
                {
                    HDevExpDefaultException1.ToHTuple(out hv_Exception);
                    hv_Exception = "Wrong value of control parameter Box[0] (must be a 'true', 'false', or a valid color string)";
                    throw new HalconException(hv_Exception);
                }
                //Calculate box extents
                hv_String_COPY_INP_TMP = (" " + hv_String_COPY_INP_TMP) + " ";
                hv_Width = new HTuple();
                for (hv_Index = 0; (int)hv_Index <= (int)((new HTuple(hv_String_COPY_INP_TMP.TupleLength()
                    )) - 1); hv_Index = (int)hv_Index + 1)
                {
                    HOperatorSet.GetStringExtents(hv_ExpDefaultWinHandle, hv_String_COPY_INP_TMP.TupleSelect(
                        hv_Index), out hv_Ascent, out hv_Descent, out hv_W, out hv_H);
                    hv_Width = hv_Width.TupleConcat(hv_W);
                }
                hv_FrameHeight = hv_MaxHeight * (new HTuple(hv_String_COPY_INP_TMP.TupleLength()
                    ));
                hv_FrameWidth = (((new HTuple(0)).TupleConcat(hv_Width))).TupleMax();
                hv_R2 = hv_R1 + hv_FrameHeight;
                hv_C2 = hv_C1 + hv_FrameWidth;
                //Display rectangles
                HOperatorSet.GetDraw(hv_ExpDefaultWinHandle, out hv_DrawMode);
                HOperatorSet.SetDraw(hv_ExpDefaultWinHandle, "fill");
                //Set shadow color
                HOperatorSet.SetColor(hv_ExpDefaultWinHandle, hv_ShadowColor);
                if ((int)(hv_UseShadow) != 0)
                {
                    HOperatorSet.DispRectangle1(hv_ExpDefaultWinHandle, hv_R1 + 1, hv_C1 + 1, hv_R2 + 1,
                        hv_C2 + 1);
                }
                //Set box color
                HOperatorSet.SetColor(hv_ExpDefaultWinHandle, hv_Box_COPY_INP_TMP.TupleSelect(
                    0));
                HOperatorSet.DispRectangle1(hv_ExpDefaultWinHandle, hv_R1, hv_C1, hv_R2, hv_C2);
                HOperatorSet.SetDraw(hv_ExpDefaultWinHandle, hv_DrawMode);
            }
            //Write text.
            for (hv_Index = 0; (int)hv_Index <= (int)((new HTuple(hv_String_COPY_INP_TMP.TupleLength()
                )) - 1); hv_Index = (int)hv_Index + 1)
            {
                hv_CurrentColor = hv_Color_COPY_INP_TMP.TupleSelect(hv_Index % (new HTuple(hv_Color_COPY_INP_TMP.TupleLength()
                    )));
                if ((int)((new HTuple(hv_CurrentColor.TupleNotEqual(""))).TupleAnd(new HTuple(hv_CurrentColor.TupleNotEqual(
                    "auto")))) != 0)
                {
                    HOperatorSet.SetColor(hv_ExpDefaultWinHandle, hv_CurrentColor);
                }
                else
                {
                    HOperatorSet.SetRgb(hv_ExpDefaultWinHandle, hv_Red, hv_Green, hv_Blue);
                }
                hv_Row_COPY_INP_TMP = hv_R1 + (hv_MaxHeight * hv_Index);
                HOperatorSet.SetTposition(hv_ExpDefaultWinHandle, hv_Row_COPY_INP_TMP, hv_C1);
                HOperatorSet.WriteString(hv_ExpDefaultWinHandle, hv_String_COPY_INP_TMP.TupleSelect(
                    hv_Index));
            }
            //Reset changed window settings
            HOperatorSet.SetRgb(hv_ExpDefaultWinHandle, hv_Red, hv_Green, hv_Blue);
            HOperatorSet.SetPart(hv_ExpDefaultWinHandle, hv_Row1Part, hv_Column1Part, hv_Row2Part,
                hv_Column2Part);

            return;
        }
        public void gen_arrow_contour_xld(out HObject ho_Arrow, HTuple hv_Row1, HTuple hv_Column1,
     HTuple hv_Row2, HTuple hv_Column2, HTuple hv_HeadLength, HTuple hv_HeadWidth)
        {
            // Stack for temporary objects 
            HObject[] OTemp = new HObject[20];

            // Local iconic variables 

            HObject ho_TempArrow = null;

            // Local control variables 

            HTuple hv_Length = null, hv_ZeroLengthIndices = null;
            HTuple hv_DR = null, hv_DC = null, hv_HalfHeadWidth = null;
            HTuple hv_RowP1 = null, hv_ColP1 = null, hv_RowP2 = null;
            HTuple hv_ColP2 = null, hv_Index = null;
            // Initialize local and output iconic variables 
            HOperatorSet.GenEmptyObj(out ho_Arrow);
            HOperatorSet.GenEmptyObj(out ho_TempArrow);
            try
            {
                //This procedure generates arrow shaped XLD contours,
                //pointing from (Row1, Column1) to (Row2, Column2).
                //If starting and end point are identical, a contour consisting
                //of a single point is returned.
                //
                //input parameteres:
                //Row1, Column1: Coordinates of the arrows' starting points
                //Row2, Column2: Coordinates of the arrows' end points
                //HeadLength, HeadWidth: Size of the arrow heads in pixels
                //
                //output parameter:
                //Arrow: The resulting XLD contour
                //
                //The input tuples Row1, Column1, Row2, and Column2 have to be of
                //the same length.
                //HeadLength and HeadWidth either have to be of the same length as
                //Row1, Column1, Row2, and Column2 or have to be a single element.
                //If one of the above restrictions is violated, an error will occur.
                //
                //
                //Init
                ho_Arrow.Dispose();
                HOperatorSet.GenEmptyObj(out ho_Arrow);
                //
                //Calculate the arrow length
                HOperatorSet.DistancePp(hv_Row1, hv_Column1, hv_Row2, hv_Column2, out hv_Length);
                //
                //Mark arrows with identical start and end point
                //(set Length to -1 to avoid division-by-zero exception)
                hv_ZeroLengthIndices = hv_Length.TupleFind(0);
                if ((int)(new HTuple(hv_ZeroLengthIndices.TupleNotEqual(-1))) != 0)
                {
                    if (hv_Length == null)
                        hv_Length = new HTuple();
                    hv_Length[hv_ZeroLengthIndices] = -1;
                }
                //
                //Calculate auxiliary variables.
                hv_DR = (1.0 * (hv_Row2 - hv_Row1)) / hv_Length;
                hv_DC = (1.0 * (hv_Column2 - hv_Column1)) / hv_Length;
                hv_HalfHeadWidth = hv_HeadWidth / 2.0;
                //
                //Calculate end points of the arrow head.
                hv_RowP1 = (hv_Row1 + ((hv_Length - hv_HeadLength) * hv_DR)) + (hv_HalfHeadWidth * hv_DC);
                hv_ColP1 = (hv_Column1 + ((hv_Length - hv_HeadLength) * hv_DC)) - (hv_HalfHeadWidth * hv_DR);
                hv_RowP2 = (hv_Row1 + ((hv_Length - hv_HeadLength) * hv_DR)) - (hv_HalfHeadWidth * hv_DC);
                hv_ColP2 = (hv_Column1 + ((hv_Length - hv_HeadLength) * hv_DC)) + (hv_HalfHeadWidth * hv_DR);
                //
                //Finally create output XLD contour for each input point pair
                for (hv_Index = 0; (int)hv_Index <= (int)((new HTuple(hv_Length.TupleLength())) - 1); hv_Index = (int)hv_Index + 1)
                {
                    if ((int)(new HTuple(((hv_Length.TupleSelect(hv_Index))).TupleEqual(-1))) != 0)
                    {
                        //Create_ single points for arrows with identical start and end point
                        ho_TempArrow.Dispose();
                        HOperatorSet.GenContourPolygonXld(out ho_TempArrow, hv_Row1.TupleSelect(
                            hv_Index), hv_Column1.TupleSelect(hv_Index));
                    }
                    else
                    {
                        //Create arrow contour
                        ho_TempArrow.Dispose();
                        HOperatorSet.GenContourPolygonXld(out ho_TempArrow, ((((((((((hv_Row1.TupleSelect(
                            hv_Index))).TupleConcat(hv_Row2.TupleSelect(hv_Index)))).TupleConcat(
                            hv_RowP1.TupleSelect(hv_Index)))).TupleConcat(hv_Row2.TupleSelect(hv_Index)))).TupleConcat(
                            hv_RowP2.TupleSelect(hv_Index)))).TupleConcat(hv_Row2.TupleSelect(hv_Index)),
                            ((((((((((hv_Column1.TupleSelect(hv_Index))).TupleConcat(hv_Column2.TupleSelect(
                            hv_Index)))).TupleConcat(hv_ColP1.TupleSelect(hv_Index)))).TupleConcat(
                            hv_Column2.TupleSelect(hv_Index)))).TupleConcat(hv_ColP2.TupleSelect(
                            hv_Index)))).TupleConcat(hv_Column2.TupleSelect(hv_Index)));
                    }
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.ConcatObj(ho_Arrow, ho_TempArrow, out ExpTmpOutVar_0);
                        ho_Arrow.Dispose();
                        ho_Arrow = ExpTmpOutVar_0;
                    }
                }
                ho_TempArrow.Dispose();

                return;
            }
            catch (HalconException HDevExpDefaultException)
            {
                ho_TempArrow.Dispose();

                throw HDevExpDefaultException;
            }
        }
        #endregion
        // Main procedure 
        /// <summary>
        /// 标定设置，上相机标定i=0，吸嘴1标定i=1, 吸嘴2标定i=2, 吸嘴3标定i=3
        /// </summary>
        /// <param name="i"></param>
        private void TeachCalib(int i = 0)
        {
            // Initialize local and output iconic variables 
            HOperatorSet.GenEmptyObj(out ho_Image);
            HOperatorSet.GenEmptyObj(out ho_Rectangle);
            HOperatorSet.GenEmptyObj(out ho_ImageReduced);
            HOperatorSet.GenEmptyObj(out ho_SymbolXLDs);
            try
            {
                HOperatorSet.SetDraw(hv_ExpDefaultWinHandle, "margin");
                HOperatorSet.SetColor(hv_ExpDefaultWinHandle, "red");

                ho_Image.Dispose();
                HOperatorSet.ReadImage(out ho_Image, Application.StartupPath + @"/" + i.ToString() + ".tif");
                HOperatorSet.GetImageSize(ho_Image, out hv_Width, out hv_Height);
                HOperatorSet.SetPart(hv_ExpDefaultWinHandle, 0, 0, hv_Height - 1, hv_Width - 1);
                HOperatorSet.CreateDataCode2dModel("Data Matrix ECC 200", "default_parameters",
                    "maximum_recognition", out hv_DataCodeHandle);
                HOperatorSet.DrawRectangle1(hv_ExpDefaultWinHandle, out hv_Row1, out hv_Column1,
                    out hv_Row2, out hv_Column2);
                ho_Rectangle.Dispose();
                HOperatorSet.GenRectangle1(out ho_Rectangle, hv_Row1, hv_Column1, hv_Row2,
                    hv_Column2);
                ho_ImageReduced.Dispose();
                HOperatorSet.ReduceDomain(ho_Image, ho_Rectangle, out ho_ImageReduced);
                hv_Path = Application.StartupPath + @"/model" + i.ToString() + ".dcm";
                HOperatorSet.FileExists(hv_Path, out hv_FileExists);
                if ((int)(new HTuple(hv_FileExists.TupleEqual(1))) != 0)
                {
                    HOperatorSet.ReadDataCode2dModel(Application.StartupPath + @"/model" + i.ToString() + ".dcm", out hv_DataCodeHandle);
                }
                else
                {
                    HOperatorSet.DispObj(ho_Image, hv_ExpDefaultWinHandle);
                    ho_SymbolXLDs.Dispose();
                    HOperatorSet.FindDataCode2d(ho_ImageReduced, out ho_SymbolXLDs, hv_DataCodeHandle,
                        "train", "all", out hv_ResultHandles, out hv_DecodedDataStrings);
                    HOperatorSet.WriteDataCode2dModel(hv_DataCodeHandle, Application.StartupPath + @"/model" + i.ToString() + ".dcm");
                }
                ho_SymbolXLDs.Dispose();
                HOperatorSet.FindDataCode2d(ho_ImageReduced, out ho_SymbolXLDs, hv_DataCodeHandle,
                    new HTuple(), new HTuple(), out hv_ResultHandles, out hv_DecodedDataStrings);
                HOperatorSet.AreaCenterXld(ho_SymbolXLDs, out hv_Area, out hv_Row, out hv_Column,
                    out hv_PointOrder);
                disp_message(hv_ExpDefaultWinHandle, (((hv_Row + ",") + hv_Column) + "\r\n") + hv_DecodedDataStrings,
                    "window", 12, 12, "black", "true");
                HOperatorSet.DispObj(ho_SymbolXLDs, hv_ExpDefaultWinHandle);
                HOperatorSet.WriteTuple(hv_DecodedDataStrings, Application.StartupPath + @"/Decoded" + i.ToString() + ".tup");
            }
            catch (HalconException HDevExpDefaultException)
            {
                ho_Image.Dispose();
                ho_Rectangle.Dispose();
                ho_ImageReduced.Dispose();
                ho_SymbolXLDs.Dispose();

                throw HDevExpDefaultException;
            }
            ho_Image.Dispose();
            ho_Rectangle.Dispose();
            ho_ImageReduced.Dispose();
            ho_SymbolXLDs.Dispose();
        }
        /// <summary>
        /// 下相机Camera=0，上相机Camera=1；
        /// 上相机标定i=0，吸嘴1标定i=1, 吸嘴2标定i=2, 吸嘴3标定i=3；
        /// j为9/11点标定中的第几点
        /// </summary>
        /// <param name="Camera"></param>
        /// <param name="i"></param>
        /// <param name="j"></param>
        private void Calibration(int Camera = 0, int i = 0, int j = 0)
        {
            // Initialize local and output iconic variables 
            HOperatorSet.GenEmptyObj(out ho_EmptyObject);
            HOperatorSet.GenEmptyObj(out ho_SymbolXLDs1);
            HOperatorSet.GenEmptyObj(out ho_ObjectSelected);
            HOperatorSet.GenEmptyObj(out ho_Cross5);
            try
            {
                HOperatorSet.SetDraw(hv_ExpDefaultWinHandle, "margin");
                HOperatorSet.SetColor(hv_ExpDefaultWinHandle, "red");
                /////////////////////////////   采集部分     ///////////////////////////////////
                if (j == 0)
                {
                    hv_rowword = new HTuple();
                    hv_colword = new HTuple();
                }
                else
                {
                    ho_EmptyObject.Dispose();
                    HOperatorSet.ReadObject(out ho_EmptyObject, Application.StartupPath + @"/Object" + i.ToString() + ".hobj");
                }
                if (j < 9)
                {
                    //hv_rowword[j] = ComData.Cy;
                    //hv_colword[j] = ComData.Cx;
                }
                hv_Angword = new HTuple();
                hv_Angword[0] = 0;
                hv_Angword[1] = -10000;
                hv_Angword[2] = 10000;

                //ho_Image = ComData.basler_image.get_image(Camera);
                //Image Acquisition 01: Do something
                HOperatorSet.ReadTuple(Application.StartupPath + @"/Decoded" + i.ToString() + ".tup", out hv_DecodedDataStrings);
                HOperatorSet.GetImageSize(ho_Image, out hv_Width, out hv_Height);
                HOperatorSet.SetPart(hv_ExpDefaultWinHandle, 0, 0, hv_Height - 1, hv_Width - 1);
                HOperatorSet.DispObj(ho_Image, hv_ExpDefaultWinHandle);
                HOperatorSet.ReadDataCode2dModel(Application.StartupPath + @"/model" + i.ToString() + ".dcm", out hv_DataCodeHandle);
                ho_SymbolXLDs1.Dispose();
                HOperatorSet.FindDataCode2d(ho_Image, out ho_SymbolXLDs1, hv_DataCodeHandle,
                    new HTuple(), new HTuple(), out hv_ResultHandles1, out hv_DecodedDataStrings1);
                ho_ObjectSelected.Dispose();
                HOperatorSet.GenEmptyObj(out ho_ObjectSelected);
                for (hv_i = 0; (int)hv_i <= (int)((new HTuple(hv_DecodedDataStrings1.TupleLength()
                    )) - 1); hv_i = (int)hv_i + 1)
                {
                    if ((int)(new HTuple(((hv_DecodedDataStrings1.TupleSelect(hv_i))).TupleEqual(
                        hv_DecodedDataStrings))) != 0)
                    {
                        ho_ObjectSelected.Dispose();
                        HOperatorSet.SelectObj(ho_SymbolXLDs1, out ho_ObjectSelected, hv_i + 1);

                        HOperatorSet.AreaCenterXld(ho_ObjectSelected, out hv_Area, out hv_Row,
                            out hv_Column, out hv_PointOrder);
                        disp_message(hv_ExpDefaultWinHandle, (((hv_Row + ",") + hv_Column) + "\r\n") + (hv_DecodedDataStrings1.TupleSelect(hv_i)), "window", 12, 12, "black", "true");
                        if (j == 0)
                        {
                            hv_UniteY[Camera] = hv_Row;
                            hv_UniteX[Camera] = hv_Column;
                        }
                    }
                }

                HOperatorSet.CountObj(ho_ObjectSelected, out hv_Number);
                if ((int)(new HTuple(hv_Number.TupleLess(1))) != 0)
                {
                    //HDevelopStop();
                    MessageBox.Show("标定失败，未找到对应二维码！");
                    return;
                }
                else
                {
                    HOperatorSet.DispObj(ho_ObjectSelected, hv_ExpDefaultWinHandle);
                }
                HObject ExpTmpOutVar_0;
                HOperatorSet.ConcatObj(ho_EmptyObject, ho_ObjectSelected, out ExpTmpOutVar_0);
                ho_EmptyObject.Dispose();
                ho_EmptyObject = ExpTmpOutVar_0;
                HOperatorSet.WriteObject(ho_EmptyObject, Application.StartupPath + @"/Object" + i.ToString() + ".hobj");
   
                if (j == 8)
                {
                    HOperatorSet.AreaCenterXld(ho_EmptyObject, out hv_Area1, out hv_Row3, out hv_Column3,
                        out hv_PointOrder1);
                    ho_Cross5.Dispose();
                    HOperatorSet.GenCrossContourXld(out ho_Cross5, hv_Row3, hv_Column3, 15, 0.785);
                    //标定矩阵
                    HOperatorSet.VectorToHomMat2d(hv_Row3, hv_Column3, hv_rowword, hv_colword,
                        out hv_HomMat2D);
                    if ((int)(new HTuple((new HTuple(hv_HomMat2D.TupleLength())).TupleEqual(6))) != 0)
                    {
                        HOperatorSet.HomMat2dToAffinePar(hv_HomMat2D, out hv_Sx, out hv_Sy, out hv_Phi,
                            out hv_Theta, out hv_Tx, out hv_Ty);
                        hv_Ratio = ((hv_Sx.TupleAbs()) + (hv_Sy.TupleAbs())) / 2;
                        HOperatorSet.WriteTuple(hv_HomMat2D, Application.StartupPath + @"/HomMat2D" + i.ToString() + ".mtx");
                    }
                    if (Camera == 1)
                    {
                        HOperatorSet.DispObj(ho_Image, hv_ExpDefaultWinHandle);
                        HOperatorSet.DispObj(ho_EmptyObject, hv_ExpDefaultWinHandle);
                        HOperatorSet.DumpWindow(hv_ExpDefaultWinHandle, "tiff", "C:/Users/EE/Desktop/3.tif");
                        HOperatorSet.ClearDataCode2dModel(hv_DataCodeHandle);

                        Unite = new HTuple();
                        Unite = Unite.TupleConcat(hv_UniteY[0]);
                        Unite = Unite.TupleConcat(hv_UniteY[1]);
                        Unite = Unite.TupleConcat(hv_UniteX[0]);
                        Unite = Unite.TupleConcat(hv_UniteX[1]);
                        HOperatorSet.WriteTuple(Unite, Application.StartupPath + @"/Unite.tup");

                        MessageBox.Show("九点标定成功！");
                    }
                }
                if (j == 10)
                {
                    HOperatorSet.AreaCenterXld(ho_EmptyObject, out hv_Area1, out hv_Row3, out hv_Column3, out hv_PointOrder1);
                    ho_Cross5.Dispose();
                    HOperatorSet.GenCrossContourXld(out ho_Cross5, hv_Row3, hv_Column3, 15, 0.785);

                    HOperatorSet.AffineTransPoint2d(hv_HomMat2D, hv_Row3[9], hv_Column3[9], out hv_Y, out hv_X);
                    HOperatorSet.AffineTransPoint2d(hv_HomMat2D, hv_Row3[10], hv_Column3[10], out hv_Y1, out hv_X1);
                    HOperatorSet.AffineTransPoint2d(hv_HomMat2D, hv_Height / 2, hv_Width / 2, out Height, out Width);
                    //ComData.PositionX[0] = hv_X.D - Width;
                    //ComData.PositionY[0] = hv_Y.D - Height;
                    //ComData.PositionX[1] = hv_X1.D - Width;
                    //ComData.PositionY[1] = hv_Y1.D - Height;

                    HOperatorSet.DispObj(ho_Image, hv_ExpDefaultWinHandle);
                    HOperatorSet.DispObj(ho_EmptyObject, hv_ExpDefaultWinHandle);
                    HOperatorSet.DumpWindow(hv_ExpDefaultWinHandle, "tiff", "C:/Users/EE/Desktop/4.tif");
                    HOperatorSet.ClearDataCode2dModel(hv_DataCodeHandle);
                    MessageBox.Show("11点标定成功！");
                }
            }
            catch (HalconException HDevExpDefaultException)
            {
                ho_EmptyObject.Dispose();
                ho_SymbolXLDs1.Dispose();
                ho_ObjectSelected.Dispose();
                ho_Cross5.Dispose();
                MessageBox.Show("获取算子失败！");
                return;
                //throw HDevExpDefaultException;
            }
            ho_EmptyObject.Dispose();
            ho_SymbolXLDs1.Dispose();
            ho_ObjectSelected.Dispose();
            ho_Cross5.Dispose();
        }

        public void CCDGap(ref double Lx, ref double Ly)
        {
            try
            {
                HOperatorSet.ReadTuple(Application.StartupPath + @"/Unite.tup", out Unite);
                hv_UniteY[0] = Unite[0];
                hv_UniteY[1] = Unite[1];
                hv_UniteX[0] = Unite[2];
                hv_UniteX[1] = Unite[3];
                HOperatorSet.ReadTuple(Application.StartupPath + @"/HomMat2D1.mtx", out hv_HomMat2D);
                HOperatorSet.AffineTransPoint2d(hv_HomMat2D, hv_UniteY[0], hv_UniteX[0], out hv_UniteY1, out hv_UniteX1);
                HOperatorSet.AffineTransPoint2d(hv_HomMat2D, 1200 / 2, 1920 / 2, out Height, out Width);
                double y1 = hv_UniteY1.D - Height.D;
                double x1 = hv_UniteX1.D - Width.D;
                HOperatorSet.ReadTuple(Application.StartupPath + @"/HomMat2D0.mtx", out hv_HomMat2D);
                HOperatorSet.AffineTransPoint2d(hv_HomMat2D, hv_UniteY[1], hv_UniteX[1], out hv_UniteY1, out hv_UniteX1);
                HOperatorSet.AffineTransPoint2d(hv_HomMat2D, 1200 / 2, 1920 / 2, out Height, out Width);
                double y2 = hv_UniteY1.D - Height.D;
                double x2 = hv_UniteX1.D - Width.D;

                Lx = x2 + x1;
                Ly = y2 + y1;
            }
            catch
            {
                MessageBox.Show("获取算子失败！");
            }
         }
        /// <summary>
        /// Camera=0下相机实物，=1上相机实物
        /// </summary>
        /// <param name="Camera"></param>
        private void Teach(int Camera = 0)
        {
            HOperatorSet.GenEmptyObj(out ho_Image1);
            HOperatorSet.GenEmptyObj(out ho_ImageReduced);
            HOperatorSet.GenEmptyObj(out ho_Rectangle2);
            HOperatorSet.GenEmptyObj(out ho_ModelContours2);
            HOperatorSet.GenEmptyObj(out ho_Rectangle1);
            HOperatorSet.GenEmptyObj(out ho_Regions1);
            HOperatorSet.GenEmptyObj(out ho_Cross1);
            HOperatorSet.GenEmptyObj(out ho_Line);
            HOperatorSet.GenEmptyObj(out ho_Regions2);
            HOperatorSet.GenEmptyObj(out ho_Cross2);
            HOperatorSet.GenEmptyObj(out ho_Line1);
            HOperatorSet.GenEmptyObj(out ho_Cross1a);
            try
            {
                //实物设置
                HOperatorSet.SetDraw(hv_ExpDefaultWinHandle, "margin");
                HOperatorSet.SetColor(hv_ExpDefaultWinHandle, "red");
                ho_Image1.Dispose();
                HOperatorSet.ReadImage(out ho_Image1, Application.StartupPath + @"/" + (Camera + 2).ToString() + ".tif");
                HOperatorSet.GetImageSize(ho_Image1, out hv_Width1, out hv_Height1);
                HOperatorSet.SetPart(hv_ExpDefaultWinHandle, 0, 0, hv_Height1 - 1, hv_Width1 - 1);
                HOperatorSet.DispObj(ho_Image1, hv_ExpDefaultWinHandle);
                HOperatorSet.DrawRectangle1(hv_ExpDefaultWinHandle, out hv_Row1C, out hv_Column1C,
                    out hv_Row2C, out hv_Column2C);
                ho_Rectangle2.Dispose();
                HOperatorSet.GenRectangle1(out ho_Rectangle2, hv_Row1C, hv_Column1C, hv_Row2C,
                    hv_Column2C);
                ho_ImageReduced.Dispose();
                HOperatorSet.ReduceDomain(ho_Image1, ho_Rectangle2, out ho_ImageReduced);
                HOperatorSet.CreateShapeModel(ho_ImageReduced, "auto", (new HTuple(-15)).TupleRad()
                    , (new HTuple(30)).TupleRad(), "auto", "auto", "use_polarity", "auto",
                    "auto", out hv_ModelID2);
                ho_ModelContours2.Dispose();
                HOperatorSet.GetShapeModelContours(out ho_ModelContours2, hv_ModelID2, 1);
                HOperatorSet.FindShapeModel(ho_ImageReduced, hv_ModelID2, (new HTuple(-15)).TupleRad()
                    , (new HTuple(30)).TupleRad(), 0.1, 1, 0.5, "least_squares", 0, 0.9, out hv_Row4,
                    out hv_Column4, out hv_Angle4, out hv_Score3);

                ho_Rectangle1.Dispose();
                draw_rake(out ho_Rectangle1, hv_ExpDefaultWinHandle, 30, 120, 15, out hv_Row11,
                    out hv_Column11, out hv_Row21, out hv_Column21);
                ho_Regions1.Dispose();
                rake(ho_Image1, out ho_Regions1, 30, 120, 15, 1, 5, "all", "max", hv_Row11,
                    hv_Column11, hv_Row21, hv_Column21, out hv_ResultRow, out hv_ResultColumn);
                ho_Cross1.Dispose();
                HOperatorSet.GenCrossContourXld(out ho_Cross1, hv_ResultRow, hv_ResultColumn,
                    15, 0.785);
                ho_Line.Dispose();
                pts_to_best_line(out ho_Line, hv_ResultRow, hv_ResultColumn, 5, out hv_Row1a,
                    out hv_Col1a, out hv_Row2a, out hv_Col2a);

                ho_Rectangle2.Dispose();
                draw_rake(out ho_Rectangle2, hv_ExpDefaultWinHandle, 30, 120, 15, out hv_Row12,
                    out hv_Column12, out hv_Row22, out hv_Column22);
                ho_Regions2.Dispose();
                rake(ho_Image1, out ho_Regions2, 30, 120, 15, 1, 5, "all", "max", hv_Row12,
                    hv_Column12, hv_Row22, hv_Column22, out hv_ResultRow1, out hv_ResultColumn1);
                ho_Cross2.Dispose();
                HOperatorSet.GenCrossContourXld(out ho_Cross2, hv_ResultRow1, hv_ResultColumn1,
                    15, 0.785);
                ho_Line1.Dispose();
                pts_to_best_line(out ho_Line1, hv_ResultRow1, hv_ResultColumn1, 5, out hv_Row1b,
                    out hv_Col1b, out hv_Row2b, out hv_Col2b);
                HOperatorSet.DispObj(ho_Image1, hv_ExpDefaultWinHandle);
                HOperatorSet.DispObj(ho_Line, hv_ExpDefaultWinHandle);
                HOperatorSet.DispObj(ho_Line1, hv_ExpDefaultWinHandle);
                HOperatorSet.IntersectionLl(hv_Row1a, hv_Col1a, hv_Row2a, hv_Col2a, hv_Row1b,
                    hv_Col1b, hv_Row2b, hv_Col2b, out hv_Row1r, out hv_Col1r, out hv_IsParallel);
                ho_Cross1a.Dispose();
                HOperatorSet.GenCrossContourXld(out ho_Cross1a, hv_Row1r, hv_Col1r, 30, 0.785398);
                hv_X = new HTuple();
                hv_X = hv_X.TupleConcat(hv_Row4);
                hv_X = hv_X.TupleConcat(hv_Column4);
                hv_X = hv_X.TupleConcat(hv_Angle4);
                hv_X = hv_X.TupleConcat(hv_Row11);
                hv_X = hv_X.TupleConcat(hv_Column11);
                hv_X = hv_X.TupleConcat(hv_Row21);
                hv_X = hv_X.TupleConcat(hv_Column21);
                hv_X = hv_X.TupleConcat(hv_Row12);
                hv_X = hv_X.TupleConcat(hv_Column12);
                hv_X = hv_X.TupleConcat(hv_Row22);
                hv_X = hv_X.TupleConcat(hv_Column22);
                HOperatorSet.WriteTuple(hv_X, Application.StartupPath + @"/X" + Camera.ToString() + ".tup");
                HOperatorSet.WriteShapeModel(hv_ModelID2, Application.StartupPath + @"/ModelID2" + Camera.ToString() + ".shm");

            }
            catch (HalconException HDevExpDefaultException)
            {
                ho_Image1.Dispose();
                ho_Rectangle2.Dispose();
                ho_ModelContours2.Dispose();
                ho_Rectangle1.Dispose();
                ho_Regions1.Dispose();
                ho_Cross1.Dispose();
                ho_Line.Dispose();
                ho_Regions2.Dispose();
                ho_Cross2.Dispose();
                ho_Line1.Dispose();
                ho_Cross1a.Dispose();
                MessageBox.Show("算子失败！");
                //throw HDevExpDefaultException;
            }
            ho_Image1.Dispose();
            ho_Rectangle2.Dispose();
            ho_ModelContours2.Dispose();
            ho_Rectangle1.Dispose();
            ho_Regions1.Dispose();
            ho_Cross1.Dispose();
            ho_Line.Dispose();
            ho_Regions2.Dispose();
            ho_Cross2.Dispose();
            ho_Line1.Dispose();
            ho_Cross1a.Dispose();

        }
        /// <summary>
        /// 下相机Camera=0，上相机Camera=1；
        /// 上相机标定i=0，吸嘴1标定i=1, 吸嘴2标定i=2, 吸嘴3标定i=3；
        /// </summary>
        /// <param name="Camera"></param>
        /// <param name="i"></param>
        private void action(int Camera = 0,int i = 0)
        {
            HOperatorSet.GenEmptyObj(out ho_Image1);
            HOperatorSet.GenEmptyObj(out ho_ImageReduced);
            HOperatorSet.GenEmptyObj(out ho_Rectangle2);
            HOperatorSet.GenEmptyObj(out ho_ModelContours2);
            HOperatorSet.GenEmptyObj(out ho_Rectangle1);
            HOperatorSet.GenEmptyObj(out ho_Regions1);
            HOperatorSet.GenEmptyObj(out ho_Cross1);
            HOperatorSet.GenEmptyObj(out ho_Line);
            HOperatorSet.GenEmptyObj(out ho_Regions2);
            HOperatorSet.GenEmptyObj(out ho_Cross2);
            HOperatorSet.GenEmptyObj(out ho_Line1);
            HOperatorSet.GenEmptyObj(out ho_Cross1a);
            try
            {
                HOperatorSet.SetDraw(hv_ExpDefaultWinHandle, "margin");
                HOperatorSet.SetColor(hv_ExpDefaultWinHandle, "red");
                /////////////////////////////   实物部分     ///////////////////////////////////
                HOperatorSet.ReadTuple(Application.StartupPath + @"/X" + Camera.ToString() + ".tup", out hv_X);
                HOperatorSet.ReadShapeModel(Application.StartupPath + @"/ModelID2" + Camera.ToString() + ".shm", out hv_ModelID2);
                HOperatorSet.ReadTuple(Application.StartupPath + @"/HomMat2D" + i.ToString() + ".mtx", out hv_HomMat2D);
                hv_Row4 = hv_X[0];
                hv_Column4 = hv_X[1];
                hv_Angle4 = hv_X[2];
                hv_Row11 = hv_X[3];
                hv_Column11 = hv_X[4];
                hv_Row21 = hv_X[5];
                hv_Column21 = hv_X[6];
                hv_Row12 = hv_X[7];
                hv_Column12 = hv_X[8];
                hv_Row22 = hv_X[9];
                hv_Column22 = hv_X[10];
                //ho_Image1.Dispose();
                //ho_Image1 = ComData.basler_image.get_image(Camera);

                HOperatorSet.GetImageSize(ho_Image1, out hv_Width1, out hv_Height1);
                HOperatorSet.SetPart(hv_ExpDefaultWinHandle, 0, 0, hv_Height1 - 1, hv_Width1 - 1);
                HOperatorSet.DispObj(ho_Image1, hv_ExpDefaultWinHandle);
                //***************************
                HOperatorSet.FindShapeModel(ho_Image1, hv_ModelID2, (new HTuple(-60)).TupleRad()
                    , (new HTuple(120)).TupleRad(), 0.1, 1, 0.5, "least_squares", 0, 0.9, out hv_Row8,
                    out hv_Column8, out hv_Angle8, out hv_Score1);
                if ((int)(new HTuple(hv_Row8.TupleGreater(0))) != 0)
                {
                    HOperatorSet.VectorAngleToRigid(hv_Row4, hv_Column4, hv_Angle4, hv_Row8,
                        hv_Column8, hv_Angle8, out hv_HomMat2D5);
                    HOperatorSet.AffineTransPixel(hv_HomMat2D5, hv_Row11, hv_Column11, out hv_tRow11,
                        out hv_tColumn11);
                    HOperatorSet.AffineTransPixel(hv_HomMat2D5, hv_Row21, hv_Column21, out hv_tRow21,
                        out hv_tColumn21);
                    HOperatorSet.AffineTransPixel(hv_HomMat2D5, hv_Row12, hv_Column12, out hv_tRow12,
                        out hv_tColumn12);
                    HOperatorSet.AffineTransPixel(hv_HomMat2D5, hv_Row22, hv_Column22, out hv_tRow22,
                        out hv_tColumn22);
                    ho_Regions1.Dispose();
                    rake(ho_Image1, out ho_Regions1, 30, 120, 15, 1, 5, "all", "max", hv_tRow11,
                        hv_tColumn11, hv_tRow21, hv_tColumn21, out hv_ResultRow, out hv_ResultColumn);
                    ho_Cross1.Dispose();
                    HOperatorSet.GenCrossContourXld(out ho_Cross1, hv_ResultRow, hv_ResultColumn,
                        15, 0.785);
                    ho_Line.Dispose();
                    pts_to_best_line(out ho_Line, hv_ResultRow, hv_ResultColumn, 10, out hv_Row1a,
                        out hv_Col1a, out hv_Row2a, out hv_Col2a);

                    ho_Regions2.Dispose();
                    rake(ho_Image1, out ho_Regions2, 30, 120, 15, 1, 5, "all", "max", hv_tRow12,
                        hv_tColumn12, hv_tRow22, hv_tColumn22, out hv_ResultRow1, out hv_ResultColumn1);
                    ho_Cross2.Dispose();
                    HOperatorSet.GenCrossContourXld(out ho_Cross2, hv_ResultRow1, hv_ResultColumn1,
                        15, 0.785);
                    ho_Line1.Dispose();
                    pts_to_best_line(out ho_Line1, hv_ResultRow1, hv_ResultColumn1, 10, out hv_Row1b,
                        out hv_Col1b, out hv_Row2b, out hv_Col2b);
                    HOperatorSet.DispObj(ho_Image1, hv_ExpDefaultWinHandle);
                    HOperatorSet.DispObj(ho_Line, hv_ExpDefaultWinHandle);
                    HOperatorSet.DispObj(ho_Line1, hv_ExpDefaultWinHandle);
                    HOperatorSet.IntersectionLl(hv_Row1a, hv_Col1a, hv_Row2a, hv_Col2a, hv_Row1b,
                        hv_Col1b, hv_Row2b, hv_Col2b, out hv_Row1r, out hv_Col1r, out hv_IsParallel);
                    ho_Cross1a.Dispose();
                    HOperatorSet.GenCrossContourXld(out ho_Cross1a, hv_Row1r, hv_Col1r, 30, 0.785398);
                    //夹角
                    HOperatorSet.AngleLl(0, 0, 0, 100, hv_Row1b, hv_Col1b, hv_Row2b, hv_Col2b,
                        out hv_Angle);
                    HOperatorSet.TupleDeg(hv_Angle, out hv_Deg);

                    HOperatorSet.AffineTransPoint2d(hv_HomMat2D, hv_Row1r, hv_Col1r, out hv_Y, out hv_X);
                    HOperatorSet.AffineTransPoint2d(hv_HomMat2D, hv_Height1 / 2, hv_Width1 / 2, out Height, out Width);
                    //ComData.DistanceX = hv_X.D - Width;
                    //ComData.DistanceY = hv_Y.D - Height;
                    //ComData.Angle = hv_Deg.D;
                    //ComData.Result = 1;
                    HOperatorSet.DumpWindow(hv_ExpDefaultWinHandle, "tiff", "C:/Users/EE/Desktop/" + Camera.ToString()+ ".tif");
                }
                else
                {
                    disp_message(hv_ExpDefaultWinHandle, "查找实物失败", "window", 12, 12, "red", "true");
                    //ComData.DistanceX = 0;
                    //ComData.DistanceY = 0;
                    //ComData.Angle = 0;
                    //ComData.Result = 0;
                }

            }
            catch (HalconException HDevExpDefaultException)
            {
                ho_Image1.Dispose();
                ho_Rectangle2.Dispose();
                ho_ModelContours2.Dispose();
                ho_Rectangle1.Dispose();
                ho_Regions1.Dispose();
                ho_Cross1.Dispose();
                ho_Line.Dispose();
                ho_Regions2.Dispose();
                ho_Cross2.Dispose();
                ho_Line1.Dispose();
                ho_Cross1a.Dispose();
                MessageBox.Show("算子失败！");
                //throw HDevExpDefaultException;
            }
            ho_Image1.Dispose();
            ho_Rectangle2.Dispose();
            ho_ModelContours2.Dispose();
            ho_Rectangle1.Dispose();
            ho_Regions1.Dispose();
            ho_Cross1.Dispose();
            ho_Line.Dispose();
            ho_Regions2.Dispose();
            ho_Cross2.Dispose();
            ho_Line1.Dispose();
            ho_Cross1a.Dispose();

        }


        /// <summary>
        /// 下相机Camera=0，上相机Camera=1；
        /// num为保存的第num个图片
        /// </summary>
        /// <param name="WindowHandle"></param>
        /// <param name="Camera"></param>
        /// <param name="num"></param>
        public void GrapCamera(HTuple WindowHandle,int Camera = 0, int num = 0)
        {

            //ho_Image = ComData.basler_image.get_image(Camera);


            if (WindowHandle != null)
            {
                try
                {
                    HOperatorSet.Rgb1ToGray(ho_Image, out ho_Image);
                    HOperatorSet.GetImageSize(ho_Image, out hv_Width, out hv_Height);
                    HOperatorSet.SetPart(WindowHandle, 0, 0, hv_Height - 1, hv_Width - 1);
                    HOperatorSet.DispObj(ho_Image, WindowHandle);
                    //HOperatorSet.WriteImage(Image, "bmp", 0, "./1.bmp");

                    switch (num)
                    {
                        case 0:
                            HOperatorSet.WriteImage(ho_Image, "tiff", 0, Application.StartupPath + @"/0.tif");
                            break;
                        case 1:
                            HOperatorSet.WriteImage(ho_Image, "tiff", 0, Application.StartupPath + @"/1.tif");
                            break;
                        case 2:
                            HOperatorSet.WriteImage(ho_Image, "tiff", 0, Application.StartupPath + @"/2.tif");
                            break;
                        case 3:
                            HOperatorSet.WriteImage(ho_Image, "tiff", 0, Application.StartupPath + @"/3.tif");
                            break;
                        case 4:
                            HOperatorSet.WriteImage(ho_Image, "tiff", 0, Application.StartupPath + @"/九点标定/1.tif");
                            hv_Ratio = new HTuple();
                            //hv_Ratio = hv_Ratio.TupleConcat(ComData.Cx);
                            //hv_Ratio = hv_Ratio.TupleConcat(ComData.Cy);
                            HOperatorSet.WriteTuple(hv_Ratio, Application.StartupPath + @"/Ratio.tup");
                            break;
                        case 5:
                            HOperatorSet.WriteImage(ho_Image, "tiff", 0, Application.StartupPath + @"/九点标定/2.tif");
                            break;
                        case 6:
                            HOperatorSet.WriteImage(ho_Image, "tiff", 0, Application.StartupPath + @"/九点标定/3.tif");
                            break;
                        case 7:
                            HOperatorSet.WriteImage(ho_Image, "tiff", 0, Application.StartupPath + @"/九点标定/4.tif");
                            break;
                        case 8:
                            HOperatorSet.WriteImage(ho_Image, "tiff", 0, Application.StartupPath + @"/九点标定/5.tif");
                            break;
                        case 9:
                            HOperatorSet.WriteImage(ho_Image, "tiff", 0, Application.StartupPath + @"/九点标定/6.tif");
                            break;
                        case 10:
                            HOperatorSet.WriteImage(ho_Image, "tiff", 0, Application.StartupPath + @"/九点标定/7.tif");
                            break;
                        case 11:
                            HOperatorSet.WriteImage(ho_Image, "tiff", 0, Application.StartupPath + @"/九点标定/8.tif");
                            break;
                        case 12:
                            HOperatorSet.WriteImage(ho_Image, "tiff", 0, Application.StartupPath + @"/九点标定/9.tif");
                            break;
                        default:
                            break;
                    }

                }
                catch
                {
                    System.Windows.Forms.MessageBox.Show("获取图像失败");
                }
            }
        }

        public void InitHalcon()
        {
            // Default settings used in HDevelop 
            HOperatorSet.SetSystem("width", 512);
            HOperatorSet.SetSystem("height", 512);
        }
        /// <summary>
        /// 标定设置，上相机标定i=0，吸嘴1标定i=1, 吸嘴2标定i=2, 吸嘴3标定i=3
        /// </summary>
        /// <param name="Window"></param>
        /// <param name="i"></param>
        public void TeachCalibHalcon(HTuple Window,int i = 0)
        {
            hv_ExpDefaultWinHandle = Window;
            TeachCalib(i);
        }
        /// <summary>
        /// 下相机Camera=0，上相机Camera=1；
        /// 上相机标定i=0，吸嘴1标定i=1, 吸嘴2标定i=2, 吸嘴3标定i=3；
        /// j为9/11点标定中的第几点
        /// </summary>
        /// <param name="Window"></param>
        /// <param name="camera"></param>
        /// <param name="i"></param>
        /// <param name="j"></param>
        public void CaliHalcon(HTuple Window,int camera =0, int i = 0,int j = 0)
        {
            hv_ExpDefaultWinHandle = Window;
            Calibration(camera,i,j);
        }

        public void TeachHalcon(HTuple Window, int camera = 0)
        {
            hv_ExpDefaultWinHandle = Window;
            Teach(camera);
        }

        public void RunHalcon(HTuple Window, int camera = 0,int i = 0)
        {
            hv_ExpDefaultWinHandle = Window;
            action(camera,i);
        }

    }

}